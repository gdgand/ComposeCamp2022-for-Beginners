// ===========================================
// Generic

class FillInTheBlankQuestion(
    val questionText: String,
    val answer: String,
    val difficulty: String,
)

class TrueOfFalseQuestion(
	val questionText: String,
    val answer: Boolean,
    val difficulty: String,
)

class NumericQuestion(
    val questionText: String,
    val answer: Int,
    val difficulty: String,
)

class Question<T>(
	val questionText: String,
    val answer: T,
    val difficulty: String,
)

fun main() {
	val question1 = Question<String>("Quoth the raven ___", "nevermore", "medium")
    val question2 = Question<Boolean>("The sky is green. True or false", false, "easy")
    val question3 = Question<Int>("How many days are there between full moons?", 28, "hard")
    
    println(question1.answer)
    println(question2.answer)
    println(question3.answer)
}




// ===========================================
// Enum

enum class Difficulty {
    EASY, MEDIUM, HARD
}

class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

fun main() {
	val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
	val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
	val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)
}




// ===========================================
// Data class

enum class Difficulty {
    EASY, MEDIUM, HARD
}

data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

fun main() {
	val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
	val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
	val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)
    println(question1.toString())
}




// ===========================================
// Singleton object

enum class Difficulty {
    EASY, MEDIUM, HARD
}

data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

class Quiz {
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)

    companion object StudentProgress {
    	var total: Int = 10
    	var answered: Int = 3
    }
}

fun main() {
	println("${Quiz.answered} of ${Quiz.total} answered.")
}




// ===========================================
// Extend classes with new properties and methods

enum class Difficulty {
    EASY, MEDIUM, HARD
}

data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

class Quiz {
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)

    companion object StudentProgress {
    	var total: Int = 10
    	var answered: Int = 3
    }
}

// extension property는 데이터 저장 불가, get-olny
val Quiz.StudentProgress.progressText: String
	get() = "${answered} of ${total} answered"
    
fun Quiz.StudentProgress.printProgressBar() {
    repeat(Quiz.answered) { print("▓") }
    repeat(Quiz.total - Quiz.answered) { print("▒") }
    println()
    println(Quiz.progressText)
}

fun main() {
	// println(Quiz.progressText)
    Quiz.printProgressBar()
}




// ===========================================
// Use scope functions to access class properties and methods

enum class Difficulty {
    EASY, MEDIUM, HARD
}

data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

class Quiz {
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)

    companion object StudentProgress {
    	var total: Int = 10
    	var answered: Int = 3
    }
    
    fun printQuiz() {
   
        question1.let {
            println(it.questionText)
            println(it.answer)
            println(it.difficulty)
        }
        println()
        question2.let {
            println(it.questionText)
            println(it.answer)
            println(it.difficulty)
        }
        println()
        question3.let {
            println(it.questionText)
            println(it.answer)
            println(it.difficulty)
        }
        println()
	}
}

// extension property는 데이터 저장 불가, get-olny
val Quiz.StudentProgress.progressText: String
	get() = "${answered} of ${total} answered"
    
fun Quiz.StudentProgress.printProgressBar() {
    repeat(Quiz.answered) { print("▓") }
    repeat(Quiz.total - Quiz.answered) { print("▒") }
    println()
    println(Quiz.progressText)
}

fun main() {
    Quiz().apply {
        printQuiz()
    }
}






